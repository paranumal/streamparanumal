/*

  The MIT License (MIT)

  Copyright (c) 2017-2022 Tim Warburton, Noel Chalmers, Jesse Chan, Ali Karakus

  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in all
  copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.

*/

@kernel void bs5_1(const int NB,
                   const int N,
                   @restrict const dfloat *p,
                   @restrict const dfloat *Ap,
                   const dfloat alpha,
                   @restrict       dfloat *x,
                   @restrict       dfloat *r,
                   @restrict       dfloat *rdotr){

#if OCCA_USE_HIP==1
#define p_SIMD 64
#define p_NW 4
#else
#define p_SIMD 32
#define p_NW 32
#endif

  for(int b=0;b<NB;++b;@outer(0)){

    @shared dfloat s_rdotr[p_NW];

    // assume NT is a multiple of p_WARP
    for(int w=0;w<p_NW;++w;@inner(1)){
      for(int t=0;t<p_SIMD;++t;@inner(0)){
        int n =  t + p_SIMD*w + b*p_blockSize;

	// do this first
        while(n<N){
          x[n] += alpha*p[n];
          n += p_blockSize*NB;
        }

        dfloat res = 0;
        n =  t + p_SIMD*w + b*p_blockSize;

        // do this second
        while(n<N){
	  dfloat rn = r[n];
          rn -= alpha*Ap[n];
          res += rn*rn;
	  r[n] = rn;
          n += p_blockSize*NB;
        }

	
#if OCCA_USE_HIP==1
        res += __shfl_down(res, 32, p_SIMD);
        res += __shfl_down(res, 16, p_SIMD);
        res += __shfl_down(res,  8, p_SIMD);
        res += __shfl_down(res,  4, p_SIMD);
        res += __shfl_down(res,  2, p_SIMD);
        res += __shfl_down(res,  1, p_SIMD);
#else
        res += __shfl_down_sync(0xFFFFFFFF, res, 16, p_SIMD);
        res += __shfl_down_sync(0xFFFFFFFF, res,  8, p_SIMD);
        res += __shfl_down_sync(0xFFFFFFFF, res,  4, p_SIMD);
        res += __shfl_down_sync(0xFFFFFFFF, res,  2, p_SIMD);
        res += __shfl_down_sync(0xFFFFFFFF, res,  1, p_SIMD);
#endif

        if(t==0)
          s_rdotr[w] = res;

      }
    }

    // assume p_NW<=p_SIMD
    for(int w=0;w<p_NW;++w;@inner(1)){
      for(int t=0;t<p_SIMD;++t;@inner(0)){

        if(w==0){
          dfloat res = (t<p_NW) ? s_rdotr[t]:(dfloat)0.0;

#if OCCA_USE_HIP==1
          // assume p_NW = 4
          res += __shfl_down(res,  2, p_SIMD);
          res += __shfl_down(res,  1, p_SIMD);
#else
          res += __shfl_down_sync(0xFFFFFFFF, res,  16, p_SIMD);
	  res += __shfl_down_sync(0xFFFFFFFF, res,  8, p_SIMD);
          res += __shfl_down_sync(0xFFFFFFFF, res,  4, p_SIMD);
          res += __shfl_down_sync(0xFFFFFFFF, res,  2, p_SIMD);
          res += __shfl_down_sync(0xFFFFFFFF, res,  1, p_SIMD);
#endif

          if(t==0)
            rdotr[b] = res;
        }
      }
    }
  }
}


@kernel void bs5_2(const dlong Nblocks,
                   @restrict const  dfloat *a,
                   @restrict        dfloat *rdotr){


  for(dlong b=0;b<1;++b;@outer(0)){

    @shared dfloat s_dot[p_blockSize];

    for(int t=0;t<p_blockSize;++t;@inner(0)){
      dlong id = t + b*p_blockSize;
      dfloat r_dot = 0.0;
      while (id<Nblocks) {
        r_dot += a[id];
        id += p_blockSize*Nblocks;
      }
      s_dot[t] = r_dot;
    }

#if p_blockSize>512
    for(int t=0;t<p_blockSize;++t;@inner(0)) if(t<512 && t+512<p_blockSize) s_dot[t] += s_dot[t+512];
#endif

#if p_blockSize>256
    for(int t=0;t<p_blockSize;++t;@inner(0)) if(t<256 && t+256<p_blockSize) s_dot[t] += s_dot[t+256];
#endif

    for(int t=0;t<p_blockSize;++t;@inner(0)) if(t<128 && t+128<p_blockSize) s_dot[t] += s_dot[t+128];
    for(int t=0;t<p_blockSize;++t;@inner(0)) if(t<64 && t+64<p_blockSize) s_dot[t] += s_dot[t+ 64];
    for(int t=0;t<p_blockSize;++t;@inner(0)) if(t<32 && t+32<p_blockSize) s_dot[t] += s_dot[t+ 32];
    for(int t=0;t<p_blockSize;++t;@inner(0)) if(t<16 && t+16<p_blockSize) s_dot[t] += s_dot[t+ 16];
    for(int t=0;t<p_blockSize;++t;@inner(0)) if(t<8 && t+8<p_blockSize) s_dot[t] += s_dot[t+  8];
    for(int t=0;t<p_blockSize;++t;@inner(0)) if(t<4 && t+4<p_blockSize) s_dot[t] += s_dot[t+  4];
    for(int t=0;t<p_blockSize;++t;@inner(0)) if(t<2 && t+2<p_blockSize) s_dot[t] += s_dot[t+  2];
    for(int t=0;t<p_blockSize;++t;@inner(0)){
      if(t<1 && t+1<p_blockSize) s_dot[t] += s_dot[1];
      if(t==0) rdotr[b] = s_dot[0];
    }
  }
}

